#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <iostream>
using namespace std;
//prameters that can be changed
int numberOfObstacles=30;//number of obstacles per wave
float ObsSpacing=8;//how close together are the obstacles
float obsSize=1.3;
float playerSpeed=0.4;
float obstacleSpeed=0.5;
float obstacleSidewaySpeed=0.2;
float playerSize=0.8;
float Unkillablecooldown=5000;
int xMin=-7;
int xMax=7;
int frameRate=60;
int sceneIndex=0;
int waveTextDuration=2000;


float frameDelay;
bool playerAlive=true;
bool playerUnkillable=true;
float UnkillablecooldownCountDown=0;
bool Unkillableavaliable=true;
float UnkillablecooldownCountDownEndTime=0;
int runTime=15;
bool waveTextActive=false;
int wavenum=0;
struct obs //structure for obstacles
{
    float x;
    float z;
    float speed;
};
float  playerX;
float playerVelocityX;
float obstacleOffset=-(numberOfObstacles*ObsSpacing)-100;//z coordinate where obsitacles start appearing
int score=0;
int i=0;
vector <obs> ObsX;
obs temp;
const GLfloat light_ambient[]  = { 0.0f, 0.0f, 0.0f, 1.0f };
const GLfloat light_diffuse[]  = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_position[] = { 4.0f, 5.0f, 15.0f, 0.0f };

const GLfloat mat_ambient[]    = { 0.7f, 0.7f, 0.7f, 1.0f };
const GLfloat mat_diffuse[]    = { 0.8f, 0.8f, 0.8f, 1.0f };
const GLfloat mat_specular[]   = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat high_shininess[] = { 100.0f };


void generateNextWave()
{
    ObsX.clear();
    for(int i=0; i<numberOfObstacles*ObsSpacing; i=i+ObsSpacing)
    {
        temp.x=rand()%16-8;
        temp.z=i;
        temp.speed=rand()%5;
        ObsX.push_back(temp);
    }
    obstacleOffset=-(numberOfObstacles*ObsSpacing)-100;//z coordinate where obsitacles start appearing
}
void init()
{
    glClearColor(0.8,0.8,0.8,1.0);
    glEnable(GL_CULL_FACE);
    glCullFace(GL_BACK);

    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LESS);

    glEnable(GL_LIGHT0);
    glEnable(GL_NORMALIZE);
    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_LIGHTING);

    glLightfv(GL_LIGHT0, GL_AMBIENT,  light_ambient);
    glLightfv(GL_LIGHT0, GL_DIFFUSE,  light_diffuse);
    glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
    glLightfv(GL_LIGHT0, GL_POSITION, light_position);

    glMaterialfv(GL_FRONT, GL_AMBIENT,   mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE,   mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR,  mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
}
void reshape(int w,int h) //called whenever the window is ceated or reshaped
{
    glViewport(0,0,w,h);//set the viewport to the zise of the window
    glMatrixMode(GL_PROJECTION);//switch to projection matrix mode
    glLoadIdentity();//resets the paramaters of the projection
    gluPerspective(60, (GLfloat)w / (GLfloat)h, 1.0, 100.0); // Set the Field of view angle (in degrees), the aspect ratio of our window, and the new and obstacleOffset planes
    glMatrixMode(GL_MODELVIEW);//switch back to model view mode
}
void drawScore()
{
    glPushMatrix();
    glColor3f(0,0,0);
    glRasterPos2f(3.0,3.0);//set the position
    string scoreString="Score: ";
    scoreString+=to_string(score);
    for(int i=0; i<scoreString.length(); i++)
    {
        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, scoreString.at(i));//print the letter
    }
    glPopMatrix();
}
void drawObs(float xobs,float zobs)
{
    glPushMatrix();
    glTranslatef(xobs,-4.0f,zobs+obstacleOffset);
    glutSolidCube(1.3);
    glPopMatrix();
}
void drawWaveText()
{
    glPushMatrix();
    glColor3f(0,0,0);
    glTranslatef(-2.0,3.0,0.0);//set the position
    glScalef(0.003,0.003,0.003);
    string waveTextString="Wave: ";
    waveTextString+=to_string(wavenum);
    for(int i=0; i<waveTextString.length(); i++)
    {
        glutStrokeCharacter(GLUT_STROKE_ROMAN, waveTextString.at(i));//print the letter
    }
    glPopMatrix();
    glPushMatrix();
    glTranslatef(-2.0,2.0,0.0);//set the position
    glScalef(0.0015,0.0015,0.0015);
    string waveChangeString="Obstacle Speed ";
    waveChangeString+=to_string(obstacleSpeed);
    for(int i=0; i<waveChangeString.length()-5; i++)
    {
        glutStrokeCharacter(GLUT_STROKE_ROMAN, waveChangeString.at(i));//print the letter
    }
    glPopMatrix();
}
void displayGameScene()
{
    float playerVelocityX,ymov;
    glClear(GL_COLOR_BUFFER_BIT| GL_DEPTH_BUFFER_BIT);//clears the frame buffer in the memory
    glLoadIdentity();//resets and matrix transformations
    glTranslatef(0.0, 0.0, -10.0f); // Push eveything 10 units back into the scene, otherwise we won't see the primitive
    if(playerAlive==true)
    {
        glPushMatrix();
        glTranslatef(0.0,-4.0f,0.0);
        if(playerUnkillable==true)
        {
            glColor3f(1.0f,0.9f,0.0f);
        }
        glutSolidCube(0.8);
        glPopMatrix();
        drawScore();
        if(waveTextActive==true)
        {
            drawWaveText();
        }
        glPushMatrix();
        glColor3f(0,0,0);
        glRasterPos2f(3.0,-3.0);//set the position
        string cooldownString="";
        cooldownString=to_string(UnkillablecooldownCountDown);
        for(int i=0; i<cooldownString.length()-5; i++)
        {
            glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, cooldownString.at(i));//print the letter
        }
        glPopMatrix();
    }
    glColor3f(0.0f,1.0f,1.0f);
    if(playerAlive!=true)
    {
        glPushMatrix();
        glRasterPos2f(-1.0,0.0);//set the position
        string scoreString="You Died";
        for(int i=0; i<scoreString.length(); i++)
        {
            glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, scoreString.at(i));//print the lett
        }
        glRasterPos2f(-1.0,-1.0);//set the position
        scoreString="Score: ";
        scoreString+=to_string(score);
        for(int i=0; i<scoreString.length(); i++)
        {
            glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, scoreString.at(i));//print the letter
        }
        glPopMatrix();
    }
    glPushMatrix();

// glEnable(GL_TEXTURE_2D);
    /* glPushMatrix();
     glTranslatef(0.0f,-4.0f,0.0);
     glNormal3f(0.0,1.0,0.0);
     glBegin(GL_POLYGON);
     glVertex3f(-8.0f,-4.0f,-300.0);
     glVertex3f(8.0f,-4.0f,-300.0);
     glVertex3f(8.0f,-4.0f,50.0);
     glVertex3f(-8.0f,-4.0f,50.0);
     glEnd();
     glPopMatrix();*/
    glColor3f(1.0f,0.3f,0.3f);
    for(int i=0; i<numberOfObstacles; i++)
    {
        drawObs(ObsX[i].x-playerX,ObsX[i].z);
    }
    glColor3f(1.0f,1.0f,1.0f);
    glutSwapBuffers();//display what is drawn on the screen
}
void displayMenuScene()
{
    glClear(GL_COLOR_BUFFER_BIT| GL_DEPTH_BUFFER_BIT);//clears the frame buffer in the memory
    glLoadIdentity();
    glTranslatef(0.0, 0.0, -10.0f); // Push eveything 10 units back into the scene, otherwise we won't see the primitive
    glPushMatrix();
    glColor3f(0,0,0);
    glTranslatef(-3.0,1.0,0);//set the position
    glScalef(0.005,0.005,0.005);
    string MenuText="A Game Title";
    for(int i=0; i<MenuText.length(); i++)
    {
        glutStrokeCharacter(GLUT_STROKE_MONO_ROMAN, MenuText.at(i));//print the letter
    }
    glPopMatrix();
    glPushMatrix();
    glColor3f(0,0,0);
    glTranslatef(-2.0,-1.0,0.0);//set the position
    glScalef(0.003,0.003,0.003);
    string ButtonText="Press z to Start";
    for(int i=0; i<ButtonText.length(); i++)
    {
        glutStrokeCharacter(GLUT_STROKE_ROMAN, ButtonText.at(i));//print the letter
    }
    glPopMatrix();
    glPushMatrix();
    glColor3f(0,0,0);
    glTranslatef(-5.0,-2.0,0.0);//set the position
    glScalef(0.003,0.003,0.003);
    string TutorialText="move with A and D. Activate invincible ability ";
    for(int i=0; i<TutorialText.length(); i++)
    {
        glutStrokeCharacter(GLUT_STROKE_ROMAN, TutorialText.at(i));//print the letter
    }
        glPopMatrix();
        glPushMatrix();
    glTranslatef(-5.0,-3.0,0.0);//set the position
    glScalef(0.003,0.003,0.003);
    TutorialText="using space(1s duration,5s cooldown)";
     for(int i=0; i<TutorialText.length(); i++)
    {
        glutStrokeCharacter(GLUT_STROKE_ROMAN, TutorialText.at(i));//print the letter
    }
    glPopMatrix();
    glutSwapBuffers();//display what is drawn on the screen
}
void display()
{
    if(sceneIndex==0)
    {
        displayMenuScene();
    }
    if(sceneIndex==1)
    {
        displayGameScene();
    }
}
void UnkillableTimer(int t)
{
    playerUnkillable=false;
}
void UnkillablecooldownCountDownTimer(int t)
{
    Unkillableavaliable=true;
    UnkillablecooldownCountDown=0;
}
void waveTextTimer(int t)
{
    waveTextActive=false;
}
void NormalInput(unsigned char key, int x, int y)
{
    if(sceneIndex==0)
    {
        if(key==122)
        {
            sceneIndex=1;
            wavenum++;
    waveTextActive=true;
    glutTimerFunc(waveTextDuration,waveTextTimer,0);
    generateNextWave();
        }
    }
    if(sceneIndex==1)
    {
        switch(key)
        {
        case 100: // right
            playerVelocityX=playerSpeed;
            break;
        case 97: // left
            playerVelocityX=-playerSpeed;
            break;
        case 32: // right
            if(Unkillableavaliable)
            {
                playerUnkillable=true;
                UnkillablecooldownCountDownEndTime=runTime+Unkillablecooldown;
                UnkillablecooldownCountDown=(UnkillablecooldownCountDownEndTime-runTime)/1000;
                Unkillableavaliable=false;
                glutTimerFunc(1000,UnkillableTimer,0);
                glutTimerFunc(Unkillablecooldown,UnkillablecooldownCountDownTimer,0);
            }
            break;

        }
        glutPostRedisplay();
    }
}
void NormalInputUp(unsigned char key, int x, int y)
{
    if(sceneIndex==1)
    {
        switch(key)
        {
        case 100: // right
            playerVelocityX=0;
            break;
        case 97: // left
            playerVelocityX=-0;
            break;
        }
        glutPostRedisplay();
    }
}

void update(int t)
{
    glutTimerFunc(frameDelay,update,0);
    if(sceneIndex==1)
    {
        runTime=runTime+frameDelay;
        if(obstacleOffset>0)
        {
            wavenum++;
            obstacleSpeed+=0.1;
            waveTextActive=true;
            glutTimerFunc(waveTextDuration,waveTextTimer,0);
            generateNextWave();
        }

        playerX=playerX+playerVelocityX;
        if(playerX<xMin)
        {
            playerX=xMin;
        }
        if(playerX>xMax)
        {
            playerX=xMax;
        }
        obstacleOffset=obstacleOffset+obstacleSpeed;
        for(int i=0; i<ObsX.size(); i++) //if the z coordinate match
            {
                if(ObsX[i].speed==1){
                    ObsX[i].x+=obstacleSidewaySpeed;
                }
                if(ObsX[i].speed==-1){
                    ObsX[i].x-=obstacleSidewaySpeed;
                }
                if(ObsX[i].x<xMin)
        {
            ObsX[i].speed=1;
        }
        if(ObsX[i].x>xMax)
        {
            ObsX[i].speed=-1;
        }
            }
        if(playerAlive==true)
        {
            score++;
        }
        if(Unkillableavaliable==false)
        {
            UnkillablecooldownCountDown=UnkillablecooldownCountDown-(frameDelay/1000);
        }

        if(playerUnkillable==false)
        {
            for(int i=0; i<ObsX.size(); i++) //if the z coordinate match
            {
                if(ObsX[i].z+obstacleOffset +obsSize/2 < playerSize/2 &&//if the the front plane of the obstacle is between the front and back planes of the player
                        ObsX[i].z+obstacleOffset +obsSize/2 >-playerSize/2 ||
                        ObsX[i].z+obstacleOffset -obsSize/2 < playerSize/2 &&//or if the the back plane of the obstacle is between the front and back planes of the player
                        ObsX[i].z+obstacleOffset -obsSize/2 > -playerSize/2 )
                {
                    if(ObsX[i].x+obsSize/2 > playerX-playerSize/2 &&//if the right plane of the obstacle is between the left and right planes of the player
                            ObsX[i].x+obsSize/2 < playerX+playerSize/2 ||
                            ObsX[i].x-obsSize/2 > playerX-playerSize/2 &&//or if the left plane of the obstacle is between the left and right planes of the player
                            ObsX[i].x-obsSize/2 < playerX+playerSize/2 ||
                            ObsX[i].x+obsSize/2 > playerX+playerSize/2 &&//or if the left plane of the obstacle is between the left and right planes of the player
                            ObsX[i].x-obsSize/2 < playerX-playerSize/2) //or if the right plane of the obstacle has bigger x value than the right plane of the player and the left plane of the obstacle has smaller x value than the left plane of the player(player inside the obstacle)
                    {
                        playerAlive=false;//the player is touching an obstacle
                    }
                }
            }
        }
        glutPostRedisplay();
    }
}

int main(int argc,char**argv)
{
    frameDelay=1000/frameRate;
    srand (time(NULL));
    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);

    glutInitWindowPosition(0,0);//set the windows position
    glutInitWindowSize(500,500);//set the window size

    glutCreateWindow("Dodge obstacles game");//create the window
    init();
    glutDisplayFunc(display);//assign the display callback function
    glutReshapeFunc(reshape);//assign the reshape callback function

    glutTimerFunc(frameDelay,update,0);
    glutKeyboardFunc(NormalInput);
    glutKeyboardUpFunc(NormalInputUp);
    glutMainLoop();//loop the main function for the program to keep running

}
